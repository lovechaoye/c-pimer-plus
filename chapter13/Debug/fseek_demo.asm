; Listing generated by Microsoft (R) Optimizing Compiler Version 19.25.28614.0 

	TITLE	C:\Users\Administrator\source\repos\chapter13\fseek_demo.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_buff:BYTE:0100000H
_DATA	ENDS
msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__9D285020_fseek_demo@c DB 01H
msvcjmc	ENDS
PUBLIC	_mdddain
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_06MKEPKMBA@av?4mp4@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp__perror:PROC
EXTRN	__imp__exit:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MKEPKMBA@av?4mp4@
CONST	SEGMENT
??_C@_06MKEPKMBA@av?4mp4@ DB 'av.mp4', 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\source\repos\chapter13\fseek_demo.c
;	COMDAT _mdddain
_TEXT	SEGMENT
_file$ = -32						; size = 4
_resize$ = -20						; size = 4
_fp$ = -8						; size = 4
_mdddain PROC						; COMDAT

; 6    : int mdddain(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9D285020_fseek_demo@c
	call	@__CheckForDebuggerJustMyCode@4

; 7    :     FILE* fp;
; 8    :     long resize;
; 9    :     
; 10   :     const char* file = "av.mp4";

	mov	DWORD PTR _file$[ebp], OFFSET ??_C@_06MKEPKMBA@av?4mp4@

; 11   :     if ((fp = fopen(file, "wb")) == NULL) {

	mov	esi, esp
	push	OFFSET ??_C@_02GMLFBBN@wb@
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	DWORD PTR __imp__fopen
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _fp$[ebp], eax
	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN2@mdddain

; 12   :         perror(NULL);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__perror
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 13   :         exit(EXIT_FAILURE);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@mdddain:

; 14   :     }
; 15   :     resize = 1024*1024;

	mov	DWORD PTR _resize$[ebp], 1048576	; 00100000H

; 16   :     fwrite(buff,1024*1024,sizeof(char),fp);

	mov	esi, esp
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	push	1
	push	1048576					; 00100000H
	push	OFFSET _buff
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 17   :     //if (fseek(fp, resize, SEEK_END))
; 18   :     //{
; 19   :     //    perror(NULL);
; 20   :     //    exit(EXIT_FAILURE);
; 21   :     //}
; 22   :     if (fclose(fp) == -1) {

	mov	esi, esp
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	DWORD PTR __imp__fclose
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, -1
	jne	SHORT $LN3@mdddain

; 23   :         perror(NULL);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__perror
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 24   :         exit(EXIT_FAILURE);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@mdddain:

; 25   :     }
; 26   :     return 0;

	xor	eax, eax
$LN4@mdddain:

; 27   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_mdddain ENDP
_TEXT	ENDS
END
