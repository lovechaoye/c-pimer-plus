; Listing generated by Microsoft (R) Optimizing Compiler Version 19.25.28614.0 

	TITLE	C:\Users\Administrator\source\repos\chapter13\getline.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__3C945950_getline@c DB 01H
msvcjmc	ENDS
PUBLIC	_getline
PUBLIC	_readline
PUBLIC	_maidddddddn
PUBLIC	__JustMyCode_Default
EXTRN	__imp__malloc:PROC
EXTRN	__imp__realloc:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fgets:PROC
EXTRN	__imp__puts:PROC
EXTRN	_strlen:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\source\repos\chapter13\getline.c
;	COMDAT _maidddddddn
_TEXT	SEGMENT
_p$ = -32						; size = 4
_count$ = -20						; size = 4
_buff$ = -8						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_maidddddddn PROC					; COMDAT

; 13   : int maidddddddn(int argc, char* argv[]) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C945950_getline@c
	call	@__CheckForDebuggerJustMyCode@4

; 14   : 				/*FILE* fp;
; 15   : 				if (argc < 2)
; 16   : 				{
; 17   : 								puts("Usage: input a filename");
; 18   : 								exit(EXIT_FAILURE);
; 19   : 				}
; 20   : 				if ((fp = fopen(argv[1],"r")) == NULL)
; 21   : 				{
; 22   : 								perror("open file failed!");
; 23   : 								exit(EXIT_FAILURE);
; 24   : 				}*/
; 25   : 				char* buff = NULL;

	mov	DWORD PTR _buff$[ebp], 0

; 26   : 				int count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 27   : 				char* p = NULL;

	mov	DWORD PTR _p$[ebp], 0
$LN2@maiddddddd:

; 28   : 				while ((p = readline()) != NULL) {

	call	_readline
	mov	DWORD PTR _p$[ebp], eax
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@maiddddddd

; 29   : 								puts(p);

	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	DWORD PTR __imp__puts
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 30   : 				}

	jmp	SHORT $LN2@maiddddddd
$LN3@maiddddddd:

; 31   : 				//while (getline(&buff,&count,stdin))
; 32   : 				//{
; 33   : 				//				puts(buff);
; 34   : 				//				printf("%d\n",count);
; 35   : 				//}
; 36   : 				return 0;

	xor	eax, eax

; 37   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_maidddddddn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\source\repos\chapter13\getline.c
;	COMDAT _readline
_TEXT	SEGMENT
_new_length$1 = -68					; size = 4
_line$2 = -56						; size = 4
_cursor$3 = -44						; size = 4
_data$ = -32						; size = 4
_data_length$ = -20					; size = 4
_alloc_length$ = -8					; size = 4
_readline PROC						; COMDAT

; 67   : char* readline() {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C945950_getline@c
	call	@__CheckForDebuggerJustMyCode@4

; 68   : 				size_t alloc_length = 1024;

	mov	DWORD PTR _alloc_length$[ebp], 1024	; 00000400H

; 69   : 				size_t data_length = 0;

	mov	DWORD PTR _data_length$[ebp], 0

; 70   : 				char* data = malloc(alloc_length);

	mov	esi, esp
	mov	eax, DWORD PTR _alloc_length$[ebp]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _data$[ebp], eax
$LN2@readline:

; 71   : 
; 72   : 				while (1) {

	mov	eax, 1
	test	eax, eax
	je	$LN3@readline

; 73   : 								char* cursor = data + data_length;

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _data_length$[ebp]
	mov	DWORD PTR _cursor$3[ebp], eax

; 74   : 								char* line = fgets(cursor, alloc_length - data_length, stdin);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _alloc_length$[ebp]
	sub	eax, DWORD PTR _data_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cursor$3[ebp]
	push	ecx
	call	DWORD PTR __imp__fgets
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _line$2[ebp], eax

; 75   : 
; 76   : 								if (!line) { break; }

	cmp	DWORD PTR _line$2[ebp], 0
	jne	SHORT $LN4@readline
	jmp	SHORT $LN3@readline
$LN4@readline:

; 77   : 
; 78   : 								data_length += strlen(cursor);

	mov	eax, DWORD PTR _cursor$3[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _data_length$[ebp]
	mov	DWORD PTR _data_length$[ebp], eax

; 79   : 
; 80   : 								if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') { break; }

	mov	eax, DWORD PTR _alloc_length$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _data_length$[ebp], eax
	jb	SHORT $LN6@readline
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _data_length$[ebp]
	movsx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN5@readline
$LN6@readline:
	jmp	SHORT $LN3@readline
$LN5@readline:

; 81   : 
; 82   : 								size_t new_length = alloc_length << 1;

	mov	eax, DWORD PTR _alloc_length$[ebp]
	shl	eax, 1
	mov	DWORD PTR _new_length$1[ebp], eax

; 83   : 								data = realloc(data, new_length);

	mov	esi, esp
	mov	eax, DWORD PTR _new_length$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _data$[ebp], eax

; 84   : 
; 85   : 								if (!data) { break; }

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN7@readline
	jmp	SHORT $LN3@readline
$LN7@readline:

; 86   : 
; 87   : 								alloc_length = new_length;

	mov	eax, DWORD PTR _new_length$1[ebp]
	mov	DWORD PTR _alloc_length$[ebp], eax

; 88   : 				}

	jmp	$LN2@readline
$LN3@readline:

; 89   : 
; 90   : 				if (data[data_length - 1] == '\n') {

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _data_length$[ebp]
	movsx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN8@readline

; 91   : 								data[data_length - 1] = '\0';

	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _data_length$[ebp]
	mov	BYTE PTR [eax-1], 0
$LN8@readline:

; 92   : 				}
; 93   : 
; 94   : 
; 95   : 				return data;

	mov	eax, DWORD PTR _data$[ebp]

; 96   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_readline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Administrator\source\repos\chapter13\getline.c
;	COMDAT _getline
_TEXT	SEGMENT
_length$ = -32						; size = 4
_buff$ = -20						; size = 4
_size$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Count$ = 12						; size = 4
__Stream$ = 16						; size = 4
_getline PROC						; COMDAT

; 39   : char* getline(__OUT__ char ** _Buffer, __OUT__ int * _Count, __INOUT__ FILE * _Stream) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __3C945950_getline@c
	call	@__CheckForDebuggerJustMyCode@4

; 40   : 				size_t size = SIZE;

	mov	DWORD PTR _size$[ebp], 10		; 0000000aH

; 41   : 				char* buff = (char *)malloc(size);

	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buff$[ebp], eax

; 42   : 				size_t length = 0;

	mov	DWORD PTR _length$[ebp], 0
$LN2@getline:

; 43   : 				while (1)

	mov	eax, 1
	test	eax, eax
	je	$LN1@getline

; 44   : 				{
; 45   : 								if (!fgets(buff+ length, size - length, _Stream)) { //fgets()一定要正确指定大小，要不然就数据溢出了

	mov	esi, esp
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buff$[ebp]
	add	edx, DWORD PTR _length$[ebp]
	push	edx
	call	DWORD PTR __imp__fgets
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@getline

; 46   : 												break;

	jmp	SHORT $LN1@getline
$LN4@getline:

; 47   : 								}
; 48   : 								length += strlen(buff + length);  //这个可以利用上一次的统计，节约时间，strlen()是O(n)的时间复杂度

	mov	eax, DWORD PTR _buff$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR _length$[ebp], eax

; 49   : 								//length = strlen(buff);
; 50   : 								if (buff[length - 1] == '\n' ) {  //读取到了换行,即读取的没有超过缓冲区大小

	mov	eax, DWORD PTR _buff$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	movsx	ecx, BYTE PTR [eax-1]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN5@getline

; 51   : 												buff[length - 1] = '\0';

	mov	eax, DWORD PTR _buff$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	mov	BYTE PTR [eax-1], 0

; 52   : 												*_Count = length - 1;

	mov	eax, DWORD PTR _length$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [ecx], eax

; 53   : 												*_Buffer = buff;

	mov	eax, DWORD PTR __Buffer$[ebp]
	mov	ecx, DWORD PTR _buff$[ebp]
	mov	DWORD PTR [eax], ecx

; 54   : 												break;

	jmp	SHORT $LN1@getline
$LN5@getline:

; 55   : 								}
; 56   : 								//读取的行比缓冲区大的多，依旧没有读到换行，就扩大缓冲区
; 57   : 								//printf("扩大缓冲区\n");
; 58   : 								size = size << 1;

	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR _size$[ebp], eax

; 59   : 								buff = (char *)realloc(buff, size);

	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buff$[ebp]
	push	ecx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buff$[ebp], eax

; 60   : 								if (!buff)

	cmp	DWORD PTR _buff$[ebp], 0
	jne	SHORT $LN6@getline

; 61   : 								{
; 62   : 												break;

	jmp	SHORT $LN1@getline
$LN6@getline:

; 63   : 								}
; 64   : 				}

	jmp	$LN2@getline
$LN1@getline:

; 65   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_getline ENDP
_TEXT	ENDS
END
